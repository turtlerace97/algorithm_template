# Biconnected Component

단절점 또는 절단점은 ( cut vertex or articulation point) 해당 정점을 제거 했을 때 전체 도로망을 2개의 컴포넌트로 분리할 수 있는 점을 의미한다. 

비슷한 맥락으로, 단절선 또는 절단선은 간선을 제거했을 때 전체 도로망을 2개의 컴포넌트로 분리할 수 있는 간선을 의미한다. 

이 때 어떤 그래프 G에는 절단점이 존재하지 않는다고 하면, 해당 그래프는 `Biconnected` 되었다고 말한다.  

절단점을 찾는 단순한 알고리즘은 하나의 정점을 제거하고 bfs 돌렸을때 컴포넌트 갯수를 세주는 방식으로  $O(V^{2} + VE)$ 에 가능하다. 

여기서 데이터를 2가지를 유지하면, $O(V+E)$ 에 그래프에 존재하는 모든 절단점을 찾을 수 있다. 

- dfs_num[v] : $v$를 몇번째로 방문했는지 ( dfs spanning tree를 기준으로 )
- dfs_low[v] :  $v$ 가 역방향 간선을 이용해서 도달할 수 있는 최소의 dfs_num

여기서 주의할 점은 부모로의 간선은 취급하지 않는 것으로 한다. 

절단점을 나누는 기준은 다음과 같다. 현재 정점 : cur 다음 방문할 정점이 nxt라 할 때

dfs_low[nxt] ≥ dfs_num[cur] 이라면 cur는 절단점이 된다. 이유는 nxt가 cur의 부모로 가는 역방향 간선이 존재하지 않는다는 것을 의미하기 때문이다. 

예외 테스트 케이스가 하나가 있는데, dfs 스패닝 트리의 root가 절단점이 되는 경우 

dfs_num[root]는 항상 dfs_low[nxt]보다 작거나 같기 때문에 자식의 개수가 2개 이상인지 확인해줘야 한다. 

즉, 자식의 개수가 1개면 절단점이 아니다. 

절단선은 dfs_low[nxt] > dfs_num[cur] 인 경우이다.
